{"ast":null,"code":"import * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar observerMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get; // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n\n\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options, fallbackInView) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (fallbackInView === void 0) {\n    fallbackInView = unsupportedValue;\n  }\n\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  var _createObserver = createObserver(options),\n      id = _createObserver.id,\n      observer = _createObserver.observer,\n      elements = _createObserver.elements; // Register the callback listener for this element\n\n\n  var callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap[\"delete\"](id);\n    }\n  };\n}\n\nvar _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n\n  function InView(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      _this.node = node ? node : null;\n\n      _this.observeNode();\n    };\n\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n\n  var _proto = InView.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n        threshold = _this$props.threshold,\n        root = _this$props.root,\n        rootMargin = _this$props.rootMargin,\n        trackVisibility = _this$props.trackVisibility,\n        delay = _this$props.delay,\n        fallbackInView = _this$props.fallbackInView;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n  };\n\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  };\n\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        as = _this$props2.as,\n        props = _objectWithoutPropertiesLoose(_this$props2, _excluded);\n\n    return /*#__PURE__*/React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n\n  return InView;\n}(React.Component);\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\n\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      threshold = _ref.threshold,\n      delay = _ref.delay,\n      trackVisibility = _ref.trackVisibility,\n      rootMargin = _ref.rootMargin,\n      root = _ref.root,\n      triggerOnce = _ref.triggerOnce,\n      skip = _ref.skip,\n      initialInView = _ref.initialInView,\n      fallbackInView = _ref.fallbackInView,\n      onChange = _ref.onChange;\n\n  var unobserve = React.useRef();\n  var callback = React.useRef();\n\n  var _React$useState = React.useState({\n    inView: !!initialInView\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1]; // Store the onChange callback in a `ref`, so we can access the latest instance inside the `useCallback`.\n\n\n  callback.current = onChange;\n  var setRef = React.useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n        if (callback.current) callback.current(inView, entry);\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      }, fallbackInView);\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  /* eslint-disable-next-line */\n\n  React.useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,IAAIC,GAAJ,EAApB;AASA,IAAMC,OAAO,GAAwC,IAAIC,OAAJ,EAArD;AACA,IAAIC,MAAM,GAAG,CAAb;AAEA,IAAIC,gBAAgB,GAAwBC,SAA5C;AAEA;;;;;AAKM;;AACA,SAAUC,qBAAV,CAAgCC,MAAhC,EAA2D;EAC/DH,gBAAgB,GAAGG,MAAnBH;AACD;AAED;;;AAGG;;;AACH,SAASI,SAAT,CAAmBC,IAAnB,EAAyD;EACvD,IAAI,CAACA,IAAL,EAAW,OAAO,GAAP;EACX,IAAIR,OAAO,CAACS,GAART,CAAYQ,IAAZR,CAAJ,EAAuB,OAAOA,OAAO,CAACU,GAARV,CAAYQ,IAAZR,CAAP;EACvBE,MAAM,IAAI,CAAVA;EACAF,OAAO,CAACW,GAARX,CAAYQ,IAAZR,EAAkBE,MAAM,CAACU,QAAPV,EAAlBF;EACA,OAAOA,OAAO,CAACU,GAARV,CAAYQ,IAAZR,CAAP;AACD;AAED;;;;AAIG;;;AACG,SAAUa,WAAV,CAAsBC,OAAtB,EAAuD;EACpDC,aAAM,CAACC,IAAPD,CAAYD,OAAZC,EACJE,IADIF,GAEJG,MAFIH,CAEG,UAACI,GAAD;IAAA,OAASL,OAAO,CAACK,GAAD,CAAPL,KAAiBV,SAA1B;EAFH,GAGJgB,GAHIL,CAGA,UAACI,GAAD,EAAQ;IACX,OAAUA,GAAV,GACEA,GADQA,IACRA,GAAG,KAAK,MAARA,GAAiBZ,SAAS,CAACO,OAAO,CAACN,IAAT,CAA1BW,GAA2CL,OAAO,CAACK,GAAD,CAD1CA,CAAV;EAJG,GAQJP,QARIG;AASR;;AAED,SAASM,cAAT,CAAwBP,OAAxB,EAAyD;EACvD;EACA,IAAIQ,EAAE,GAAGT,WAAW,CAACC,OAAD,CAApB;EACA,IAAIS,QAAQ,GAAGzB,WAAW,CAACY,GAAZZ,CAAgBwB,EAAhBxB,CAAf;;EAEI,KAACyB,QAAD,EAAW;IACb;IACA,IAAMC,QAAQ,GAAG,IAAIzB,GAAJ,EAAjB;IACA,IAAI0B,UAAJ;IAEA,IAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,UAACC,OAAD,EAAY;MACpDA,OAAO,CAACC,OAARD,CAAgB,UAACE,KAAD,EAAU;QAAA,mBACxB;QACA;;;QACMxB,UAAM,GACVwB,KAAK,CAACC,cAAND,IACAL,UAAU,CAACO,IAAXP,CAAgB,UAACQ,SAAD;UAAA,OAAeH,KAAK,CAACI,iBAANJ,IAA2BG,SAA1C;QAAhB,EAFI3B,CAHkB;;QAQpBQ,WAAO,CAACqB,eAARrB,IAA2B,OAAOgB,KAAK,CAACM,SAAb,KAA2B,WAAtDtB,EAAmE;UACrE;UACA;UACAgB,KAAK,CAACM,SAANN,GAAkBxB,MAAlBwB;QACD;;QAED,yBAAQ,CAACpB,GAATc,CAAaM,KAAK,CAACO,MAAnBb,oCAA4BK,OAA5B,CAAoC,UAACS,QAAD,EAAa;UAC/CA,QAAQ,CAAChC,MAAD,EAASwB,KAAT,CAARQ;QADF;MAdF;IADe,GAmBdxB,OAnBc,CAAjB,CALa;;IA2BbW,UAAU,GACRC,QAAQ,CAACD,UAATC,KACCa,KAAK,CAACC,OAAND,CAAczB,OAAO,CAACmB,SAAtBM,IACGzB,OAAO,CAACmB,SADXM,GAEG,CAACzB,OAAO,CAACmB,SAARnB,IAAqB,CAAtB,CAHJY,CADFD;IAMAF,QAAQ,GAAG;MACTD,EAAE,EAAFA,EADS;MAETI,QAAQ,EAARA,QAFS;MAGTF,QAAQ,EAARA;IAHS,CAAXD;IAMAzB,WAAW,CAACa,GAAZb,CAAgBwB,EAAhBxB,EAAoByB,QAApBzB;EACD;;EAED,OAAOyB,QAAP;AACD;AAED;;;;;;AAMG;;;AACa,iBACdkB,OADc,EAEdH,QAFc,EAGdxB,OAHc,EAId4B,cAJc,EAImB;EAAA,IADjC5B,OACiC;IADjCA,OACiC,GADG,EAApCA;EACiC;;EAAA,IAAjC4B,cAAiC;IAAjCA,cAAiC,GAAhBvC,gBAAjBuC;EAAiC;;EAG/B,WAAOC,MAAM,CAAChB,oBAAd,KAAuC,WAAvC,IACAe,cAAc,KAAKtC,SADnB,EAEA;IACA,IAAMwC,MAAM,GAAGH,OAAO,CAACI,qBAARJ,EAAf;IACAH,QAAQ,CAACI,cAAD,EAAiB;MACvBX,cAAc,EAAEW,cADO;MAEvBL,MAAM,EAAEI,OAFe;MAGvBP,iBAAiB,EACf,OAAOpB,OAAO,CAACmB,SAAf,KAA6B,QAA7B,GAAwCnB,OAAO,CAACmB,SAAhD,GAA4D,CAJvC;MAKvBa,IAAI,EAAE,CALiB;MAMvBC,kBAAkB,EAAEH,MANG;MAOvBI,gBAAgB,EAAEJ,MAPK;MAQvBK,UAAU,EAAEL;IARW,CAAjB,CAARN;IAUA,OAAO,YAAK;IAAZ;EAjB+B;;;EAsBEjB,oCAAc,CAACP,OAAD,CAAdO;EAAAA,IAA3BC,EAAR,mBAAQA,EAA2BD;EAAAA,IAAvBK,QAAZ,mBAAYA,QAAuBL;EAAAA,IAAbG,QAAtB,mBAAsBA,QAAaH,CAtBF;;;EAyB7B6B,aAAS,GAAG1B,QAAQ,CAACd,GAATc,CAAaiB,OAAbjB,KAAyB,EAArC0B;;EACJ,IAAI,CAAC1B,QAAQ,CAACf,GAATe,CAAaiB,OAAbjB,CAAL,EAA4B;IAC1BA,QAAQ,CAACb,GAATa,CAAaiB,OAAbjB,EAAsB0B,SAAtB1B;EACD;;EAED0B,SAAS,CAACC,IAAVD,CAAeZ,QAAfY;EACAxB,QAAQ,CAAC0B,OAAT1B,CAAiBe,OAAjBf;EAEO,gBAAS2B,SAAT,GAAkB;IACvB;IACAH,SAAS,CAACI,MAAVJ,CAAiBA,SAAS,CAACK,OAAVL,CAAkBZ,QAAlBY,CAAjBA,EAA8C,CAA9CA;;IAEA,IAAIA,SAAS,CAACM,MAAVN,KAAqB,CAAzB,EAA4B;MAC1B;MACA1B,QAAQ,CAAR,QAAQ,CAARA,CAAgBiB,OAAhBjB;MACAE,QAAQ,CAAC2B,SAAT3B,CAAmBe,OAAnBf;IACD;;IAED,IAAIF,QAAQ,CAACiC,IAATjC,KAAkB,CAAtB,EAAyB;MACvB;MACAE,QAAQ,CAACgC,UAAThC;MACA5B,WAAW,CAAX,QAAW,CAAXA,CAAmBwB,EAAnBxB;IACD;EAdH,CAAO;AAgBR;;;;AC5JD,SAAS6D,eAAT,CACEC,KADF,EACuD;EAErD,OAAO,OAAOA,KAAK,CAACC,QAAb,KAA0B,UAAjC;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDG;;;AACH,IAAaC,MAAb;EAAAC;;EAIE,gBAAYH,KAAZ,EAAiE;IAAA;;IAC/DI,oCAAMJ,KAAN;IA2BFK,aAAuB,IAAvBA;IACAC,qBAAoC,IAApCA;;IA7BiEF,MAiEjEG,UAjEiE,GAiEpD,UAACF,IAAD,EAA0B;MACjC,UAAKA,IAAL,EAAW;QACb;QACAD,MAAKX,SAAL;;QAEA,IAAI,CAACY,IAAD,IAAS,CAACD,MAAKJ,KAAL,CAAWQ,WAArB,IAAoC,CAACJ,MAAKJ,KAAL,CAAWS,IAApD,EAA0D;UACxD;UACAL,MAAKM,QAAL,CAAc;YAAEhE,MAAM,EAAE,CAAC,CAAC0D,KAAKJ,MAAL,CAAWW,aAAvB;YAAsCzC,KAAK,EAAE1B;UAA7C,CAAd;QACD;MACF;;MAED4D,MAAKC,IAAL,GAAYA,IAAI,GAAGA,IAAH,GAAU,IAA1B;;MACAD,MAAKQ,WAAL;IA7E+D;;IAAAR,MAgFjES,YAhFiE,GAgFlD,UAACnE,MAAD,EAAkBwB,KAAlB,EAAsD;MACnE,IAAIxB,MAAM,IAAI0D,MAAKJ,KAAL,CAAWQ,WAAzB,EAAsC;QACpC;QACAJ,MAAKX,SAAL;MACD;;MACD,IAAI,CAACM,eAAe,CAACK,KAAKJ,MAAN,CAApB,EAAkC;QAChC;QACA;QACAI,MAAKM,QAAL,CAAc;UAAEhE,MAAM,EAANA,MAAF;UAAUwB,KAAK,EAALA;QAAV,CAAd;MACD;;MACD,IAAIkC,KAAKJ,MAAL,CAAWc,QAAf,EAAyB;QACvB;QACAV,MAAKJ,KAAL,CAAWc,QAAX,CAAoBpE,MAApB,EAA4BwB,KAA5B;MACD;IA7F8D;;IAE/DkC,MAAKW,KAAL,GAAa;MACXrE,MAAM,EAAE,CAAC,CAACsD,KAAK,CAACW,aADL;MAEXzC,KAAK,EAAE1B;IAFI,CAAb;IAF+D;EAMhE;;EAVH;;EAAAwE,OAYEC,kBAZF,GAYE,SAAmBC,kBAAnB,CAAmBA,SAAnB,EAAuD;IACrD;IAEEA,aAAS,CAACC,UAAVD,KAAyB,KAAKlB,KAAL,CAAWmB,UAApCD,IACAA,SAAS,CAACtE,IAAVsE,KAAmB,KAAKlB,KAAL,CAAWpD,IAD9BsE,IAEAA,SAAS,CAAC7C,SAAV6C,KAAwB,KAAKlB,KAAL,CAAW3B,SAFnC6C,IAGAA,SAAS,CAACT,IAAVS,KAAmB,KAAKlB,KAAL,CAAWS,IAH9BS,IAIAA,SAAS,CAAC3C,eAAV2C,KAA8B,KAAKlB,KAAL,CAAWzB,eAJzC2C,IAKAA,SAAS,CAACE,KAAVF,KAAoB,KAAKlB,KAAL,CAAWoB,KAL/BF,EAMA;MACA,KAAKzB,SAAL;MACA,KAAKmB,WAAL;IACD;EAxBL;;EA2BES,uCAAoBA,oBAApB,GAAoB;IAClB,KAAK5B,SAAL;IACKY,YAAO,IAAPA;EA7BT,CA2BEgB;;EAQAT,8BAAWA,WAAX,GAAW;IACL,KAAC,KAAKP,IAAN,IAAc,KAAKL,KAAL,CAAWS,IAAzB,EAA+B;IACnC,kBAOI,KAAKT,KAPT;IAAA,IACE3B,SADF,eACEA,SADF;IAAA,IAEEzB,IAFF,eAEEA,IAFF;IAAA,IAGEuE,UAHF,eAGEA,UAHF;IAAA,IAIE5C,eAJF,eAIEA,eAJF;IAAA,IAKE6C,KALF,eAKEA,KALF;IAAA,IAMEtC,cANF,eAMEA,cANF;IASKwB,oBAAed,OAAO,CACzB,KAAKa,IADoB,EAEzB,KAAKQ,YAFoB,EAGzB;MACExC,SAAS,EAATA,SADF;MAEEzB,IAAI,EAAJA,IAFF;MAGEuE,UAAU,EAAVA,UAHF;MAIE;MACA5C,eAAe,EAAfA,eALF;MAME;MACA6C,KAAK,EAALA;IAPF,CAHyB,EAYzBtC,cAZyB,CAAtBwB;EA9CT,CAmCEM;;EA2BAnB,4BAASA,SAAT,GAAS;IACH,SAAKa,YAAL,EAAmB;MACrB,KAAKA,YAAL;;MACKA,oBAAe,IAAfA;IACN;EAlEL,CA8DEb;;EAsCA6B,yBAAMA,MAAN,GAAM;IACJ,IAAI,CAACvB,eAAe,CAAC,KAAKC,KAAN,CAApB,EAAkC;MAChC,kBAA0B,KAAKe,KAA/B;MAAA,IAAQrE,MAAR,eAAQA,MAAR;MAAA,IAAgBwB,KAAhB,eAAgBA,KAAhB;MACA,OAAO,KAAK8B,KAAL,CAAWC,QAAX,CAAoB;QAAEvD,MAAM,EAANA,MAAF;QAAUwB,KAAK,EAALA,KAAV;QAAiBqD,GAAG,EAAE,KAAKhB;MAA3B,CAApB,CAAP;IACD;;IAED,mBAcI,KAAKP,KAdT;IAAA,IACEC,QADF,gBACEA,QADF;IAAA,IAEEuB,EAFF,gBAEEA,EAFF;IAAA,IAaKxB,KAbL;;IAgBA,oBAAOyB,KAAK,CAACC,aAAND,CACLD,EAAE,IAAI,KADDC;MAEHF,GAAG,EAAE,KAAKhB;IAFP,GAEsBP,KAFtB,GAGLC,QAHKwB,CAAP;EA1HJ,CAoGEH;;EApGF;AAA4BG,CAA5B,CAA4BA,KAAK,CAACE,SAAlC;ACvDA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBG;;;AACG,SAAUC,SAAV,CAWqBC,KAXrB,EAWqB;EAAA,8BAAF,EAAE;EAAA,IAVzBxD,SAUyB,QAVzBA,SAUyB;EAAA,IATzB+C,KASyB,QATzBA,KASyB;EAAA,IARzB7C,eAQyB,QARzBA,eAQyB;EAAA,IAPzB4C,UAOyB,QAPzBA,UAOyB;EAAA,IANzBvE,IAMyB,QANzBA,IAMyB;EAAA,IALzB4D,WAKyB,QALzBA,WAKyB;EAAA,IAJzBC,IAIyB,QAJzBA,IAIyB;EAAA,IAHzBE,aAGyB,QAHzBA,aAGyB;EAAA,IAFzB7B,cAEyB,QAFzBA,cAEyB;EAAA,IADzBgC,QACyB,QADzBA,QACyB;;EACzB,IAAMrB,SAAS,GAAGgC,KAAK,CAACK,MAANL,EAAlB;EACA,IAAM/C,QAAQ,GAAG+C,KAAK,CAACK,MAANL,EAAjB;;EAC0BA,2BAAK,CAACM,QAANN,CAAsB;IAC9C/E,MAAM,EAAE,CAAC,CAACiE;EADoC,CAAtBc;EAAAA,IAAnBV,KAAP,qBAA0BU;EAAAA,IAAZf,QAAd,qBAA0Be,CAHD;;;EAOzB/C,QAAQ,CAACsD,OAATtD,GAAmBoC,QAAnBpC;EAEMuD,UAAM,GAAGR,KAAK,CAACS,WAANT,CACb,UAACpB,IAAD,EAAyB;IACvB,IAAIZ,SAAS,CAACuC,OAAVvC,KAAsBjD,SAA1B,EAAqC;MACnCiD,SAAS,CAACuC,OAAVvC;MACAA,SAAS,CAACuC,OAAVvC,GAAoBjD,SAApBiD;IAHqB;;;IAOvB,IAAIgB,IAAJ,EAAU;;IAEV,IAAIJ,IAAJ,EAAU;MACRZ,SAAS,CAACuC,OAAVvC,GAAoBD,OAAO,CACzBa,IADyB,EAEzB,UAAC3D,MAAD,EAASwB,KAAT,EAAkB;QAChBwC,QAAQ,CAAC;UAAEhE,MAAM,EAANA,MAAF;UAAUwB,KAAK,EAALA;QAAV,CAAD,CAARwC;QACIhC,YAAQ,CAACsD,OAATtD,EAAkBA,QAAQ,CAACsD,OAATtD,CAAiBhC,MAAjBgC,EAAyBR,KAAzBQ;;QAElBR,SAAK,CAACC,cAAND,IAAwBsC,WAAxBtC,IAAuCuB,SAAS,CAACuC,OAAjD9D,EAA0D;UAC5D;UACAuB,SAAS,CAACuC,OAAVvC;UACAA,SAAS,CAACuC,OAAVvC,GAAoBjD,SAApBiD;QACD;MAVsB,GAYzB;QACE7C,IAAI,EAAJA,IADF;QAEEuE,UAAU,EAAVA,UAFF;QAGE9C,SAAS,EAATA,SAHF;QAIE;QACAE,eAAe,EAAfA,eALF;QAME;QACA6C,KAAK,EAALA;MAPF,CAZyB,EAqBzBtC,cArByB,CAA3BW;IAuBD;EAlCU;EAqCb;EAEE;EACA;EACAd,KAAK,CAACC,OAAND,CAAcN,SAAdM,IAA2BN,SAAS,CAACrB,QAAVqB,EAA3BM,GAAkDN,SAFlD,EAGAzB,IAHA,EAIAuE,UAJA,EAKAX,WALA,EAMAC,IANA,EAOAlC,eAPA,EAQAO,cARA,EASAsC,KATA,CAvCWK,CAATQ;EAoDN;;EACAR,KAAK,CAACU,SAANV,CAAgB,YAAK;IACnB,IAAI,CAAChC,SAAS,CAACuC,OAAX,IAAsBjB,KAAK,CAAC7C,KAA5B,IAAqC,CAACsC,WAAtC,IAAqD,CAACC,IAA1D,EAAgE;MAC9D;MACA;MACAC,QAAQ,CAAC;QACPhE,MAAM,EAAE,CAAC,CAACiE;MADH,CAAD,CAARD;IAGD;EAPH;EAUA,IAAM0B,MAAM,GAAG,CAACH,MAAD,EAASlB,KAAK,CAACrE,MAAf,EAAuBqE,KAAK,CAAC7C,KAA7B,CAAf,CAxEyB;;EA2EzBkE,MAAM,CAACb,GAAPa,GAAaA,MAAM,CAAC,CAAD,CAAnBA;EACAA,MAAM,CAAC1F,MAAP0F,GAAgBA,MAAM,CAAC,CAAD,CAAtBA;EACAA,MAAM,CAAClE,KAAPkE,GAAeA,MAAM,CAAC,CAAD,CAArBA;EAEA,OAAOA,MAAP;AACD","names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","defaultFallbackInView","inView","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","map","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","observe","unobserve","splice","indexOf","length","size","disconnect","isPlainChildren","props","children","InView","_inheritsLoose","_this","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","observeNode","handleChange","onChange","state","_proto","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","render","ref","as","React","createElement","Component","useInView","_temp","useRef","useState","current","setRef","useCallback","useEffect","result"],"sources":["/Users/erikjunghahn/Documents/junghahnWeb/react-website-junghahn/node_modules/src/observe.ts","/Users/erikjunghahn/Documents/junghahnWeb/react-website-junghahn/node_modules/src/InView.tsx","/Users/erikjunghahn/Documents/junghahnWeb/react-website-junghahn/node_modules/src/useInView.tsx"],"sourcesContent":["import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  // Store the onChange callback in a `ref`, so we can access the latest instance inside the `useCallback`.\n  callback.current = onChange;\n\n  const setRef = React.useCallback(\n    (node: Element | null) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n            if (callback.current) callback.current(inView, entry);\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n          fallbackInView,\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  React.useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}